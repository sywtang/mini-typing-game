{"version":3,"sources":["components/WordsList/WordsList.tsx","components/useInput/useInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GET_WORDS","gql","WordsList","data","useQuery","useState","word","setWord","isCorrect","setIsCorrect","score","setScore","time","setTime","start","setStart","end","setEnd","initialValue","value","setValue","reset","bind","onChange","event","target","useInput","wordsList","words","forEach","push","keepScore","timer","setTimeout","startGame","wordInput","useEffect","wordArr","newWord","i","length","randomIdx","Math","floor","random","showWords","wpm","className","type","autoComplete","placeholder","onClick","client","ApolloClient","uri","cache","InMemoryCache","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d4ef531e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { gql, useQuery, DocumentNode } from \"@apollo/client\";\nimport \"./WordsList.scss\";\nimport { useInput } from \"../useInput/useInput\";\n\nconst GET_WORDS: DocumentNode = gql`\n  query data {\n    words {\n      word\n    }\n  }\n`;\nexport default function WordsList() {\n  const { data } = useQuery(GET_WORDS);\n  const [word, setWord] = useState<string>(\"Ready?\");\n  const [isCorrect, setIsCorrect] = useState<Boolean>(false);\n  const [score, setScore] = useState<number>(0);\n  const [time, setTime] = useState<number>(30);\n  const [start, setStart] = useState<Boolean>(false);\n  const [end, setEnd] = useState<Boolean>(false);\n\n  // Import custom hook\n  const { value, bind, reset } = useInput(\"\");\n  let wordsList: string[] = [];\n  // If query is successful, load array with words data from GraphQL\n  if (data) {\n    let words = data.words[0].word;\n    words.forEach((word: string) => {\n      wordsList.push(word);\n    });\n  }\n\n  // Display words from the query results\n  const showWords = (wordArr: string[]) => {\n    let newWord: string[] = [];\n    // Shuffle words\n    for (let i = wordArr.length - 1; i > 0; i--) {\n      const randomIdx = Math.floor(Math.random() * (i + 1));\n      newWord = [wordArr[i], wordArr[randomIdx]] = [\n        wordArr[randomIdx],\n        wordArr[i],\n      ];\n    }\n    // Update value of word state, set word check back to false, and text state to empty string\n    setWord(newWord[0]);\n    setIsCorrect(false);\n    reset();\n  };\n\n  // Track number of words typed\n  const keepScore = () => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n    return score;\n  };\n\n  // Countdown timer\n  const timer = () => {\n    if (start) {\n      setTimeout(() => setTime(time - 1), 1000);\n    } else {\n      setTime(30);\n    }\n  };\n\n  // Starts game\n  const startGame = (wordInput: string | undefined) => {\n    if (word === \"Ready?\" && wordInput === \"Ready?\") {\n      setStart(true);\n      setIsCorrect(true);\n    }\n  };\n\n  // Countdown and game over render\n  useEffect(() => {\n    startGame(value);\n    timer();\n    if (time === 0) {\n      setStart(false);\n      setEnd(true);\n    }\n  }, [startGame, value, timer, start]);\n\n  // Re-render when words matched and track score are valid causing change\n  useEffect(() => {\n    const checkWords = (wordInput: any) => {\n      if (word === \"Ready?\" && wordInput === \"Ready?\") {\n        setStart(true);\n      } else if (wordInput === word) {\n        setIsCorrect(true);\n        keepScore();\n      }\n      return score;\n    };\n\n    // Display a new word when the current one has been matched correctly\n    if (isCorrect) {\n      showWords(wordsList);\n    }\n\n    checkWords(value);\n  }, [isCorrect, wordsList, value, word, keepScore, score]);\n\n  // Click button to restart game\n  const handleReset = () => {\n    setStart(false);\n    setWord(\"Ready?\");\n    setScore(0);\n    setEnd(false);\n    reset();\n  };\n\n  // Gross WPM = (Typed entries / 5) / Time (min)\n  const wpm: number = score / 0.5;\n  return (\n    <section className=\"game\">\n      <h2 className=\"game__score\">{score}</h2>\n      <h2 className={end ? \"game__endgame\" : \"game__time\"}>{time}</h2>\n      {end && <h2 className=\"game__wpm\">Your WPM is: {wpm}</h2>}\n\n      <div className=\"words-list container\">\n        <div className=\"words-list__container\">\n          <p className=\"words-list__words\">{word}</p>\n        </div>\n      </div>\n\n      <div className=\"words\">\n        <input\n          className={\n            end ? \"words__input--disable\" : \"words__input form-control-sm\"\n          }\n          type=\"text\"\n          {...bind}\n          autoComplete=\"off\"\n          placeholder=\"Type here\"\n        />\n      </div>\n      <button className=\"game__reset\" onClick={handleReset}>\n        Restart\n      </button>\n    </section>\n  );\n}\n","import { useState } from \"react\";\n\n// custom form input hook to track value changes as you type\nexport const useInput = (initialValue: any) => {\n  const [value, setValue] = useState<any>(initialValue);\n\n  return {\n    value,\n    setValue,\n    reset: () => setValue(\"\"),\n    bind: {\n      value,\n      onChange: (event: any) => {\n        setValue(event.target.value);\n      },\n    },\n  };\n};\n","import React from \"react\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport \"./styles/App.scss\";\nimport WordsList from \"./components/WordsList/WordsList\";\n\nconst client = new ApolloClient({\n  uri: \"https://type-fast-or-else.herokuapp.com/graphql\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <main className=\"typing-game\">\n        <h1 className=\"typing-game__heading\">Typing Game</h1>\n        <WordsList />\n      </main>\n    </ApolloProvider>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}